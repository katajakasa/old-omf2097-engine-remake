#ifndef AFFILE_H
#define AFFILE_H

#include <vector>
#include <string>
#include "jaguarleap/shared/animation.h"

/** @brief AF-file header section
 */
struct __attribute__((packed)) AFHeader {
    uint16_t har_number; /**< Har ID */
    uint16_t unknown_a; /**< Unknown value, should always be 10 */
    uint32_t endurance; /**< Endurance of the HAR */
    uint8_t unknown_b; /**< Unknown, always either 0 or 1 */
    uint16_t power; /**< Power of the HAR */
    int32_t spd_fwd; /**< Forward speed */
    int32_t spd_bwd; /**< Backward speed */
    int32_t spd_up; /**< Up speed */
    int32_t spd_down; /**< Down speed */
    uint8_t unknown_c; /**< Unknown, always 0x32 */
    uint8_t unknown_d; /**< Unknown, always 0x14 */
};

/** @brief AF-file specific animation structure (also contains generic animation).
 */
class AFAnimation {
public:
    uint8_t id; /**< Animation ID */
    Animation *anim; /**< Generic animation (shared between BK and AF files) */
    std::string unknown; /**< Unknown string, max 21 chars. */
    std::string move_string; /**< Move string, max 21 chars. */
    std::string footer_string; /**< Footer string. */
};

/** @brief AF-file footer section, mostly stuff about sounds etc.
 */
struct __attribute__((packed)) AFFooter {
    uint8_t unknown_a; /**< Unknown data */

    uint8_t middle_hit; /**< Hit on middle section of HAR */
    uint8_t low_hit; /**< Hit on low section of HAR */
    uint8_t low_hit_on_fall; /**< Hit on falling HAR */
    uint8_t fall; /**< HAR fall */
    uint8_t attack; /**< HAR Attack */
    uint8_t guard; /**< HAR guard */

    uint8_t unknown_b; /**< Unknown */
    uint8_t unknown_c; /**< Unknown */

    uint8_t touchdown; /**< Har lands after jump */

    char unknown_block[10]; /**< Unknown data */

    uint8_t scecial_a; /**< Special attack 1 */
    uint8_t special_b; /**< Special attack 2 */
    uint8_t special_c; /**< Special attack 3 */

    uint8_t nova_explosion; /**< Explosion sounds generated by nova */
    uint8_t nove_laughter; /**< Nova's badass laughter :) */

    char file_id[5]; /**< Footer string, always "FGHED" in valid AF files. */
};

/** @brief AF-file parser
 */
class AFFile {
protected:
    uint8_t anim_n;

public:
    AFHeader header;
    std::vector<AFAnimation> anims;
    AFFooter footer;

    /** @brief Parses the given AF file
     *
     * @param file - Filename of the file to parse
     * @throw ParserException
     */
    AFFile(std::string file);

    virtual ~AFFile();

    /** @brief Saves the data to a given file
     *
     * @param filename - Name of the file to save to.
     */
    void save(std::string filename);
};

#endif // AFFILE_H
